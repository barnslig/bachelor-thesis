#ifndef GRAPPLE_CUH_
#define GRAPPLE_CUH_

#include <memory>

#include "OutputBuffer.cuh"
#include "State.cuh"

// Amount of parallel verification tests. Each corresponds to a CUDA block
constexpr int kGrappleVTs = 250;

// Amount of threads in a verification test. Each corresponds to a CUDA thread in a CUDA block
constexpr int kGrappleN = 32;

// Capacity of the violations output buffer, i.e. the maximum number of violations a single VT can report
constexpr unsigned int kViolationsOutputBufferSize = 256;

/**
 * A violation, found by a Grapple VT
 */
struct Violation
{
  /**
   * Idx of the run
   */
  unsigned int run;

  /**
   * Idx of the block, i.e. blockIdx.x
   */
  unsigned int block;

  /**
   * Idx of the thread, i.e. threadIdx.x
   */
  unsigned int thread;

  /**
   * The violating state
   */
  State state;
};

/**
 * The output buffer used to transfer violations from device to host
 */
using ViolationOutputBuffer = OutputBuffer<Violation, kViolationsOutputBufferSize>;

/**
 * The output generated by a Grapple run
 */
struct GrappleOutput
{
  /**
   * Discovered violations
   */
  std::shared_ptr<ViolationOutputBuffer> violations;
};

/**
 * Run the Grapple model checker on the GPU
 *
 * @param runIdx Idx of the program execution
 * @param initialState The initial state
 * @param distrib A uniform distribution to draw hash function parameters from
 * @param stream The CUDA stream in which we should execute the kernel
 * @returns The output of the VTs
 */
std::shared_ptr<GrappleOutput>
runGrapple(unsigned int runIdx, State initialState, std::mt19937 *gen, cudaStream_t *stream);

#endif // GRAPPLE_CUH_
